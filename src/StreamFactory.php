<?hh // strict
namespace HHRx;
class StreamFactory {
	private Vector<KeyedStream<mixed, mixed>> $bounded_streams = Vector{};
	public function __construct(private ?TotalAwaitable $total_awaitable = null) {}
	public function make<Tk, T>(AsyncKeyedIterator<Tk, T> $producer): KeyedStream<Tk, T> {
		$stream = new KeyedStream($producer);
		$producer_total_awaitable = $stream->run();
		if(!is_null($this->total_awaitable))
			$this->total_awaitable->add($producer_total_awaitable);
		else
			$this->total_awaitable = new TotalAwaitable($producer_total_awaitable);
		return $stream;
	}
	public function bounded_make<Tk, T>(AsyncKeyedIterator<Tk, T> $producer): KeyedStream<Tk, T> {
		$stream = new KeyedStream($producer);
		// $stream->end_on($this->total_awaitable->get_awaitable()); // bound with the future longest-running query
		$this->bounded_streams->add($stream);
		return $stream;
	}
	public function static_bounded_make<Tk, T>(AsyncKeyedIterator<Tk, T> $producer): KeyedStream<Tk, T> {
		$stream = new KeyedStream($producer);
		if(!is_null($this->total_awaitable))
			$stream->end_on($this->total_awaitable->get_static_awaitable()); // bound with the current longest-running query. Note that this might still be unbounded if $this->total_awaitable is null
		return $stream;
	}
	public function get_total_awaitable(): Awaitable<void> { // not totally keen on this public getter
		// Let this be the only way to await all streams generated by this factory. Then we can safely defer bounded streams until here.
		$total_awaitable = $this->total_awaitable;
		if(!is_null($total_awaitable)) {
			foreach($this->bounded_streams as $bounded_stream)
				$bounded_stream->end_on($total_awaitable->get_awaitable()); // bound with the future longest-running query
			return $total_awaitable->get_awaitable();
		}
		elseif($this->bounded_streams->count() > 0)
			throw new \RuntimeException('Streams were bounded by the upper-bound Awaitable from this factory, but no stream was provided as an upper bound (e.g. `StreamFactory::make` was never called).');
		else
			return async {};
	}
}